;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "images/profile.jpg")
(defvar NAME "YOUR NAME")
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)

;; Time vars
(defpoll DAY :interval "5s" `date +%d`)
(defpoll MONTH :interval "5s" `date +%m`)
(defpoll YEAR :interval "5s" `date +%Y`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Weather vars -- TODO: get open weather key and hook it up
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; Apps vars
;; (defpoll MAILS :interval "5m" `scripts/mails`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)

(defpoll TIME :interval "1s" `date +"%a %B %d, %Y - %H:%M:%S"`)

(deflisten music
  :initial ""
  "playerctl metadata --follow --format 'üéµ {{ artist }} - {{ title }} {{ duration(position) }}/{{ duration(mpris:length) }}'"
)

(defpoll music-status :interval "1s" `playerctl status`)
(defwidget music []
  (box
    :class "music"
    :orientation "horizontal"
    :halign "center"

    music
    (button :class "music_button" :onclick "playerctl previous" "‚èÆ")
    (button
      :class "music_button"
      :onclick {music-status == "Playing" ? "playerctl pause" : "playerctl play"}
      {music-status == "Playing" ? "‚è∏" : "‚èµ"}
    )
    (button :class "music_button" :onclick "playerctl next" "‚è≠")
  )
)

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 1" 1)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 2" 2)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 3" 3)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 4" 4)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 5" 5)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 6" 6)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 7" 7)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 8" 8)
    (button :class "workspace_button" :onclick "hyprctl dispatch workspace 9" 9)
  )
)

(defwidget metric [label value onchange]
  (box
    :orientation "h"
    :class "metric"
    :space-evenly false

    (box :class "label" label)
    (scale
      :min 0
      :max 100
      :active {onchange != ""}
      :value value
      :onchange onchange
    )
  )
)

(defpoll volume :interval "1s" `pamixer --get-volume`)
(defwidget volume []
  (metric
    :label "üîä"
    :value volume
    :onchange "pamixer --set-volume {}; ~/.config/hypr/scripts/volume --updated"
  )
)

(defwidget left_side []
  (box
    :class "container"
    :orientation "h"
    :halign "start"
    :space-evenly false

    (workspaces)
  )
)

(defwidget middle []
  (box
    :class "container"
    :orientation: "h"
    :halign "center"
    :space-evenly false

    (music)
  )
)

(defwidget right_side []
  (box
    :class "container"
    :orientation "horizontal"
    :halign "end"
    :space-evenly false

    (volume)
    TIME
  )
)

(defwidget bar []
  (centerbox
    :class "main_bar"
    :orientation "horizontal"
    (left_side)
    (middle)
    (right_side)
  )
)

(defwindow topbar
  :monitor 1
  :geometry (geometry 
    :x       "0px"
    :y       "20px"
    :width   "98%"
    :height  "30px"
    :anchor  "top center"
  )
  :stacking "fg"
  :exclusive true
  :wm-ignore false

  (bar)
)
